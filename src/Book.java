/**
 * This class extends the Product class to create a Book product that can be
 * ordered via our ECommerceSystem. Each book stores the author, title, year of
 * publication, and stock for hardcover, paperback, and ebook product types.
 *
 * Books can be ordered by customers. Each order can have three different
 * options, either Paperback, Hardcover, or EBooks. The system will then create
 * a new book order for that customer, and manage it until the order is either
 * shipped or cancelled.
 *
 * @author Ali Rizvi (501039655)
 * @see ECommerceSystem
 * @see Product
 * @see Customer
 * @see ProductOrder
 */
public class Book extends Product {
    private final String author;
    private final String title;
    private final int year;

    private int paperbackStock;
    private int hardcoverStock;

    /**
     * Constructs a new book with the given name, id, price, stock count, title,
     * author, and year.
     *
     * @param name           The name of the product.
     * @param id             The unique identifier of the product, generated by the
     *                       {@link ECommerceSystem}.
     * @param price          The price of the product.
     * @param paperbackStock The number of items in stock for the paperback product
     *                       type.
     * @param hardcoverStock The number of items in stock for the hardcover product
     *                       type.
     * @param title          The title of the book.
     * @param author         The author of the book.
     * @param year           The year of publication of the book.
     */
    public Book(String name, String id, double price, int paperbackStock, int hardcoverStock, String title,
            String author, int year) {
        super(name, id, price, 100000, Category.BOOKS); // 100000 is enough to be considered "seemingly" infinite.

        this.author = author;
        this.title = title;
        this.year = year;
        this.paperbackStock = paperbackStock;
        this.hardcoverStock = hardcoverStock;
    }

    /**
     * Getter for the author of the book.
     *
     * @return The author of the book.
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Getter for the year of publication of the book.
     *
     * @return The year of publication of the book.
     */
    public int getYear() {
        return year;
    }

    /**
     * Overrides {@link Product#validOptions(String)}. This implementation only
     * accepts "Paperback", "Hardcover", and "EBooks" as product options. It is
     * case-insensitive. Internally, it uses
     * {@link String#equalsIgnoreCase(String)}.
     *
     * @param productOptions The product options to validate.
     * @return True if the product options are valid for this product.
     */
    @Override
    public boolean validOptions(String productOptions) {
        if (super.validOptions(productOptions)) {
            return false;
        }

        return (productOptions.equalsIgnoreCase("Paperback")
                || productOptions.equalsIgnoreCase("Hardcover") || productOptions.equalsIgnoreCase("EBook"));
    }

    /**
     * Overrides {@link Product#hasStock(String)}. This implementation checks if
     * there is stock available for the specified product options. It only accepts
     * "Paperback", "Hardcover", and "EBooks" as product options. It is
     * case-insensitive.
     *
     * @param productOptions The product options to check stock for.
     * @return True if the product has stock available for the product options
     *         specified.
     */
    @Override
    public boolean hasStock(String productOptions) {
        String option = productOptions.toLowerCase();

        switch (option) {
            case "paperback":
                return paperbackStock > 0;
            case "hardcover":
                return hardcoverStock > 0;
            case "ebook":
                return super.hasStock(option);
        }

        return false;
    }

    /**
     * Overrides {@link Product#reduceStock(String)}. This implementation reduces
     * the stock for the specified product options. It only accepts "Paperback",
     * "Hardcover", and "EBooks" as product options. It is case-insensitive.
     *
     * @param productOptions The product options to reduce the stock for.
     */
    @Override
    public void reduceStock(String productOptions) {
        String option = productOptions.toLowerCase();

        switch (option) {
            case "paperback":
                paperbackStock--;
                break;
            case "hardcover":
                hardcoverStock--;
                break;
            case "ebook":
                super.reduceStock(option);
                break;
        }
    }

    /**
     * Overrides {@link Product#returnStock(String)}. This implementation increases
     * the stock for the specified product options. It only accepts "Paperback",
     * "Hardcover", and "EBooks" as product options. It is case-insensitive.
     *
     * @param productOptions The product options to increase the stock for.
     */
    @Override
    public void returnStock(String productOptions) {
        String option = productOptions.toLowerCase();

        switch (option) {
            case "paperback":
                paperbackStock++;
                break;
            case "hardcover":
                hardcoverStock++;
                break;
            case "ebook":
                super.returnStock(option);
                break;
        }
    }

    /**
     * Overrides {@link Product#toString()}. This implementation adds onto the super
     * implementation and appends the title, author, and year of publication for
     * this book.
     *
     * @return A string that contains the Product information and the Book
     *         information in a specific format.
     */
    @Override
    public String toString() {
        return String.format("%s Book Title: %s Author: %s Year: %d", super.toString(), title, author, year);
    }
}
