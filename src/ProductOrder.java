/**
 * This class represents an order made through our ECommerceSystem. Each order
 * has a unique identifier associated with it. Additionally, we also store the
 * customer that placed the order, the product that was ordered, and the product
 * options that were specified upon ordering.
 *
 * ProductOrders are created when a customer places an order. They are managed
 * by the system and can be cancelled. Once shipped however, they are no longer
 * managed by the system and as such, cannot be cancelled.
 *
 * @author Ali Rizvi (501039655)
 * @see ECommerceSystem
 * @see Customer
 * @see Product
 */
public class ProductOrder {
    private final String orderNumber;
    private final Product product;
    private final Customer customer;
    private final String productOptions;

    /**
     * Constructs a new product order with the given order number, product,
     * customer, and product options.
     *
     * @param orderNumber    The unique identifier for the order, generated by the
     *                       {@link ECommerceSystem}.
     * @param product        The product that was ordered.
     * @param customer       The customer that placed the order.
     * @param productOptions The product options that were specified upon ordering
     *                       by the customer.
     */
    public ProductOrder(String orderNumber, Product product, Customer customer, String productOptions) {
        this.orderNumber = orderNumber;
        this.product = product;
        this.customer = customer;
        this.productOptions = productOptions;
    }

    /**
     * Validates if this product order is the same as the product order specified.
     * Internally it compares the unique identifiers of the two product orders.
     *
     * @param number The unique identifier of the product order to compare to.
     * @return True if the unique identifier of the product order is the same as the
     *         unique identifier of the product order specified.
     */
    public boolean isOrder(String number) {
        return orderNumber.equals(number);
    }

    /**
     * Validates if this product order was placed by the customer specified.
     * Internally it compares the unique identifiers of the two customers.
     *
     * @param id The unique identifier of the customer to compare to.
     * @return True if the unique identifier of the customer is the same as the
     *         unique identifier of the customer specified.
     */
    public boolean fromCustomer(String id) {
        return customer.getId().equals(id);
    }

    /**
     * Cancels this product order. It will return the stock of the product back.
     */
    public void cancelOrder() {
        product.returnStock(productOptions);
    }

    /**
     * Overrides {@link Object#equals(Object)}. This implementation compares the
     * unique identifiers of the two product orders. Internally, it checks if the
     * other object is a product order, and then compares the unique identifiers.
     *
     * @param other The object to compare to.
     * @return True if the other object is a product order and has the same unique
     *         identifier as this product order.
     */
    @Override
    public boolean equals(Object other) {
        return other instanceof ProductOrder && orderNumber.equals(((ProductOrder) other).orderNumber);
    }

    /**
     * Overrides {@link Object#toString()}. This implementation returns a string
     * that contains the ProductOrder information in a specific format. Internally,
     * it makes use of {@link String#format(String, Object...)}.
     *
     * @return A string that contains the ProductOrder information in a specific
     *         format.
     */
    @Override
    public String toString() {
        return String.format("\nOrder # %3s Customer Id: %3s Product Id: %3s Product Name: %12s Options: %8s",
                orderNumber,
                customer.getId(), product.getId(), product.getName(),
                productOptions);
    }

    public static class NotFoundException extends RuntimeException {
        public NotFoundException(String orderNumber) {
            super(String.format("Order %s Not Found", orderNumber));
        }
    }
}
