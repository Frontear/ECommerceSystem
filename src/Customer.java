/**
 * This class represents a customer that uses our ECommerceSystem. Each customer
 * has a unique identifier associated with them. Additionally, we also store
 * their name and shipping address. This class implements the Comparable
 * interface so that we can sort customers by their name.
 *
 * Customers have the ability to place and cancel orders. Each order will be
 * designated to a specific product, and managed by the system.
 *
 * @author Ali Rizvi (501039655)
 * @see ECommerceSystem
 * @see Comparable
 * @see ProductOrder
 * @see Product
 */
public class Customer implements Comparable<Customer> {
    private final String id;
    private final String name;
    private final String shippingAddress;

    /**
     * Constructs a new customer with the given id, name, and shipping address.
     *
     * @param id      The unique identifier for the customer, generated by the
     *                {@link ECommerceSystem}.
     * @param name    The name of the customer, provided by the customer.
     * @param address The shipping address of the customer, provided by the
     *                customer.
     */
    public Customer(String id, String name, String address) {
        this.id = id;
        this.name = name;
        this.shippingAddress = address;
    }

    /**
     * Getter for the unique identifier of the customer.
     *
     * @return The unique identifier for the customer that was generated by the
     *         {@link ECommerceSystem}.
     */
    public String getId() {
        return id;
    }

    /**
     * Overrides {@link Object#equals(Object)}. This implementation compares the
     * unique identifiers of the two customers. Internally, it checks if the other
     * object is a customer, and then compares the unique identifiers.
     *
     * @param other The object to compare to.
     * @return True if the other object is a customer and has the same unique
     *         identifier as this customer.
     */
    @Override
    public boolean equals(Object other) {
        return other instanceof Customer && id.equals(((Customer) other).id);
    }

    /**
     * Overrides {@link Object#toString()}. This implementation returns a string
     * that contains the Customer information in a specific format. Internally it
     * makes use of {@link String#format(String, Object...)}.
     *
     * @return A string that contains the Customer information in a specific format.
     */
    @Override
    public String toString() {
        return String.format("\nName: %-20s ID: %3s Address: %-35s", name, id, shippingAddress);
    }

    /**
     * Overrides {@link Comparable#compareTo(Object)}. This implementation compares
     * the names of the two customers. Internally it uses
     * {@link String#compareTo(String)}.
     *
     * @param other The customer to compare to.
     * @return A negative integer, zero, or a positive integer if this customer's
     *         name is less than, equal to, or greater than the specified customer's
     *         name.
     */
    @Override
    public int compareTo(Customer other) {
        return name.compareTo(other.name);
    }
}
