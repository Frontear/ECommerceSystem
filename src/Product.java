/**
 * This class represents a product that can be ordered via our ECommerceSystem.
 * Each product has a unique identifier associated with it. Additionally, we
 * also store the product name, price, valid options, and the category best
 * aligned with the product.
 *
 * Products can be ordered by customers. Each order will be designated to that
 * specified customer, and managed by the system. The system will then create a
 * new product order for that customer, and manage it until the order is either
 * shipped or cancelled.
 *
 * @author Ali Rizvi (501039655)
 * @see ECommerceSystem
 * @see Customer
 * @see ProductOrder
 */
public class Product {
    public static enum Category {
        GENERAL, CLOTHING, BOOKS, FURNITURE, COMPUTERS
    };

    private final String name;
    private final String id;
    private final Category category;
    private final double price;
    private int stockCount;

    /**
     * Constructs a new product with the given name, id, price, stock count, and
     * category.
     *
     * @param name       The name of the product.
     * @param id         The unique identifier of the product, generated by the
     *                   {@link ECommerceSystem}.
     * @param price      The price of the product.
     * @param stockCount The number of items in stock.
     * @param category   The category of the product.
     */
    public Product(String name, String id, double price, int stockCount, Category category) {
        this.name = name;
        this.id = id;
        this.price = price;
        this.stockCount = stockCount;
        this.category = category;
    }

    /**
     * Getter for the name of the product.
     *
     * @return The name of the product.
     */
    public String getName() {
        return name;
    }

    /**
     * Getter for the unique identifier of the product.
     *
     * @return The unique identifier of the product that was generated by the
     *         {@link ECommerceSystem}.
     */
    public String getId() {
        return id;
    }

    /**
     * Getter for the price of the product.
     *
     * @return The price of the product.
     */
    public double getPrice() {
        return price;
    }

    /**
     * Validates if the product options specified are valid for this product. A
     * product option is considered valid if it has a designated stock available
     * based on the criteria. This implementation returns true only if the
     * productOptions is null. This is to safeguard against productOptions being
     * specified to a generic product that has no implementation for them. This
     * method should be overridden by subclasses to implement specific product
     * validation.
     *
     * @param options The product options to validate.
     * @return True if the product options are valid for this product.
     */
    public boolean validOptions(String productOptions) {
        return productOptions == null || productOptions.isEmpty();
    }

    /**
     * Validates if this product has stock available for the product options
     * specified. This implementation does not use the product options, as this is a
     * generic product. However, this method should be overridden by subclasses to
     * implement specific stock validation.
     *
     * @param productOptions The product options to check stock for.
     * @return True if the product has stock available for the product options
     *         specified.
     */
    public boolean hasStock(String productOptions) {
        return stockCount > 0;
    }

    /**
     * Reduces the stock count of this product by one, based on the product options.
     * This implementation does not use the product options, as this is a generic
     * product. However, this method should be overridden by subclasses to implement
     * specific stock reduction.
     *
     * @param productOptions The product options to reduce the stock for.
     */
    public void reduceStock(String productOptions) {
        stockCount--;
    }

    /**
     * Increases the stock count of this product by one, based on the product
     * options. This implementation does not use the product options, as this is a
     * generic product. However, this method should be overridden by subclasses to
     * implement specific stock returns.
     *
     * @param productOptions The product options that were specified.
     */
    public void returnStock(String productOptions) {
        stockCount++;
    }

    /**
     * Overrides {@link Object#equals(Object)}. This implementation compares the
     * unique identifiers of the two products. Internally, it checks if the other
     * object is a product, then compares the unique identifiers.
     *
     * @param obj The object to compare to.
     * @return True if the object is a product and has the same unique identifier as
     *         this product.
     */
    @Override
    public boolean equals(Object other) {
        return other instanceof Product && id.equals(((Product) other).id);
    }

    /**
     * Overrides {@link Object#toString()}. This implementation returns a string
     * that contains the Product information in a specific format. Internally it
     * makes use of {@link String#format(String, Object...)}.
     *
     * @return A string that contains the Product information in a specific format.
     */
    @Override
    public String toString() {
        return String.format("\nId: %-5s Category: %-9s Name: %-20s Price: %7.1f", id, category, name, price);
    }

    public static class NotFoundException extends RuntimeException {
        public NotFoundException(String productId) {
            super(String.format("Product %s Not Found", productId));
        }
    }

    public static class InvalidOptionsException extends RuntimeException {
        public InvalidOptionsException(Product product, String productOptions) {
            super(String.format("Product %s ProductId %s Invalid Options: %s", product.getName(), product.id, productOptions));
        }
    }

    public static class NoStockException extends RuntimeException {
        public NoStockException(Product product) {
            super(String.format("Product %s ProductId %s Out of Stock", product.getName(), product.id));
        }
    }
}
